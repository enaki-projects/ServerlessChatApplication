# noinspection GraphQLMissingType,GraphQLUnresolvedReference,GraphQLTypeRedefinition,GraphQLEmptyType,GraphQLMemberRedefinition
# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!


enum Status {
  online,
  offline,
  away
}

type User
@model(mutations: null, subscriptions: null)
@auth(rules: [
  { allow: owner, ownerField: "id" },
  { allow: private, operations: [read] }
])
{
  id: ID! @primaryKey
  cognitoIdentityId: String @index(name: "byCognitoIdentityId", sortKeyFields: ["email"])
  email: String!
  name: String!
  avatarPath: String
  status: Status
  userConversations: [UserConversation!] @hasMany(indexName: "byUser", fields: ["id"])
  messages: [Message!] @hasMany(indexName: "byUser", fields: ["id"]) @auth(rules: [{ allow: owner }])
}

type UserConversation
@model(mutations: { create: null, delete: null })
@auth(rules: [
  { allow: private }
])
{
  id: ID! @primaryKey
  conversationId: ID! @index(name: "byConversation")
  userId: ID! @index(name: "byUser")
  noUnread: Int!
  conversation: Conversation @belongsTo(fields: ["conversationId"])
  user: User @belongsTo(fields: ["userId"])
}

type Conversation
@model(mutations: null, subscriptions: null)
@auth(rules: [
  { allow: private }
])
{
  id: ID! @primaryKey
  isGroup: Boolean! @default(value: "false")
  messages: [Message!] @hasMany(indexName: "byConversation", fields: ["id"])
  lastMessageId: ID
  lastMessage: Message @hasOne(fields: ["lastMessageId"])
  userConversations: [UserConversation!] @hasMany(indexName: "byConversation", fields: ["id"])
}

type Message
@model(mutations: null, subscriptions: null)
@auth(rules: [
  { allow: owner, ownerField: "id" },
  { allow: private, operations: [read] }
])
{
  id: ID! @primaryKey
  content: String!
  type: String!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  replyToMessageId: ID
  replyToMessage: Message @hasOne(fields: ["replyToMessageId"])

  authorId: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  conversationId: ID! @index(name: "byConversation", sortKeyFields: ["createdAt"])

  isSent: Boolean @default(value: "true")
}

type ConversationNotification {
  userId: ID!
  conversationId: ID!
}

# Define schema characteristics
type Query {
  me: User
}

type Mutation {
  updateUserName(name: String!): User
  updateUserStatus(status: Status!): User
  updateCognitoIdentityId(cognitoIdentityId: String!): User
  createConversation(userId: ID!): Conversation
  createMessage(content: String!, type: String!, conversationId: ID!, replyToMessageId: ID): Message
  deleteMessage(messageId: ID!): Message
  notifyUserOfConversationCreation(userId: ID!, conversationId: ID!): ConversationNotification
  updateUserConversationForNotification(userConversationId: ID!, reset: Boolean): UserConversation
}

type Subscription {
  onUpdateUserStatus(id: ID!): User
  @aws_subscribe(mutations: ["updateUserStatus"])
  onMessageMutation(conversationId: ID!): Message
  @aws_subscribe(mutations: ["createMessage", "deleteMessage"])
  onNotifyUserOfConversationCreation(userId: ID!): ConversationNotification
  @aws_subscribe(mutations: ["notifyUserOfConversationCreation"])
  onUpdateUserConversationForNotification(userId: ID!): UserConversation
  @aws_subscribe(mutations: ["updateUserConversationForNotification"])
}

schema {
  query: Query
  mutation: Mutation
}
